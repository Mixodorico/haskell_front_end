module Absgo where

-- Haskell module generated by the BNF converter


newtype Id = Id String deriving (Eq,Ord,Show)
data Start =
   StartProg Id [Decl]
  deriving (Eq,Ord,Show)

data Decl =
   DeclFun Id [Param] Type Block
 | DeclProc Id [Param] Block
 | DeclVar [Id] Type
 | DeclVarInit [Id] [ExpR]
  deriving (Eq,Ord,Show)

data ShortVarDecl =
   DeclVarShort [Id] [ExpR]
  deriving (Eq,Ord,Show)

data Param =
   ParamL [Id] Type
 | ParamLPassType Pass [Id] Type
  deriving (Eq,Ord,Show)

data Pass =
   PassValue
 | PassRef
 | PassValueRes
  deriving (Eq,Ord,Show)

data Type =
   TypeInt
 | TypeBool
 | TypeFloat
 | TypeChar
 | TypeString
 | TypeVoid
 | TypeArray Integer Type
 | TypePointer Type
  deriving (Eq,Ord,Show)

data Block =
   BodyBlock [Statement]
  deriving (Eq,Ord,Show)

data Statement =
   StateBlock Block
 | StateSmpl StatementSmpl
 | StateReturn ExpR
 | StateIf ExpR Block
 | StateIfElse ExpR Block Block
 | StateIfStm StatementSmpl ExpR Block
 | StateIfElseStm StatementSmpl ExpR Block Block
 | StateFor [StatementSmpl] ExpR [StatementSmpl] Block
 | StateWhile ExpR Block
 | StateDecl Decl
 | StateBreak
 | StateContinue
 | StateTryCatch Block Block
 | StateWrite ExpR
 | StateRead ExpR
  deriving (Eq,Ord,Show)

data StatementSmpl =
   StateShortVarDecl ShortVarDecl
 | StateExp ExpR
 | StateAsgn ExpL ExpR
  deriving (Eq,Ord,Show)

data ExpL =
   ExpId Id
 | ExpArr ExpL ExpR
 | ExpDeref ExpR
  deriving (Eq,Ord,Show)

data ExpR =
   ExpAdd ExpR ExpR
 | ExpSub ExpR ExpR
 | ExpMul ExpR ExpR
 | ExpDiv ExpR ExpR
 | ExpMod ExpR ExpR
 | ExpEqu ExpR ExpR
 | ExpNeq ExpR ExpR
 | ExpLes ExpR ExpR
 | ExpLeq ExpR ExpR
 | ExpGre ExpR ExpR
 | ExpGrq ExpR ExpR
 | ExpAnd ExpR ExpR
 | ExpOr ExpR ExpR
 | ExpNot ExpR
 | ExpNeg ExpR
 | ExpValue Value
 | ExpLef ExpL
 | ExpFuncEmpty Id
 | ExpFunc Id [ExpR]
 | ExpRef ExpL
 | ExpPar ExpR
  deriving (Eq,Ord,Show)

data Value =
   Int Integer
 | Float Double
 | Char Char
 | String String
 | Bool Boolean
  deriving (Eq,Ord,Show)

data Boolean =
   BoolTrue
 | BoolFalse
  deriving (Eq,Ord,Show)


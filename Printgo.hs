{-# OPTIONS -fno-warn-incomplete-patterns #-}
module Printgo where

-- pretty-printer generated by the BNF converter

import Absgo
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new1 (i-1) . showChar '}' . rend (i-1) ts
    ";"      :ts -> showChar ';' .space "" . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS ((4*i)+2) (showChar ' ') . dropWhile isSpace
  new1 i  = replicateS ((4*i)+1) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = ss . doc (showString "\n")

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList t = concatD . map (prt 0 t)

instance Print a => Print [a] where
  prt _ t = prtList t

instance Print Char where
  prt _ _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList t s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ _ x = doc (shows x)


instance Print Double where
  prt _ _ x = doc (shows x)



instance Print Id where
  prt _ t (Id i) = doc (showString ( i))
  prtList  t es = case es of
   [x] -> (concatD [prt 0 t x])
   x:xs -> (concatD [prt 0 t x , doc (showString ",") , prt 0 t xs])



instance Print Start where
  prt i t e = case e of
   StartProg id decls -> prPrec i 0 (concatD [ doc (showString "package") , prt 0 t id , doc (showString "\n")  , prt 0 t decls])


instance Print Decl where
  prt i t e = case e of
   DeclFun id params type' block -> prPrec i 0 (concatD [doc (showString "func") , prt 0 t id , doc (showString "(") , prt 0  t params , doc (showString ")") , prt 0 t type' , prt 0 t block])
   DeclProc id params block -> prPrec i 0 (concatD [doc (showString "func") , prt 0 t id , doc (showString "(") , prt 0 t params , doc (showString ")") , prt 0 t block])
   DeclVar ids type' -> prPrec i 0 (concatD [doc (showString "var") , prt 0 t ids , prt 0 t type'])
   DeclVarInit ids exprs -> prPrec i 0 (concatD [doc (showString "var") , prt 0 t ids , doc (showString "=") , prt 0 t exprs])

  prtList t es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt t 0  x , doc (showString "\n"),  prt t 0 xs])

instance Print ShortVarDecl where
  prt i t e = case e of
   DeclVarShort ids exprs -> prPrec i 0 (concatD [prt t 0 ids , doc (showString ":=") , prt t 0 exprs])


instance Print Param where
  prt i t e = case e of
   ParamL ids type' -> prPrec i 0 (concatD [prt 0 t ids , prt 0 t type'])
   ParamLPassType pass ids type' -> prPrec i 0 (concatD [prt 0 t pass , prt 0 t ids , prt 0 t type'])

  prtList t  es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 t x])
   x:xs -> (concatD [prt 0 t x , doc (showString ",") , prt 0 t xs])

instance Print Pass where
  prt i t e = case e of
   PassValue  -> prPrec i 0 (concatD [doc (showString "val")])
   PassRef  -> prPrec i 0 (concatD [doc (showString "ref")])
   PassValueRes  -> prPrec i 0 (concatD [doc (showString "valres")])


instance Print Type where
  prt i t e = case e of
   TypeInt  -> prPrec i 0 (concatD [doc (showString "int")])
   TypeBool  -> prPrec i 0 (concatD [doc (showString "bool")])
   TypeFloat  -> prPrec i 0 (concatD [doc (showString "float")])
   TypeChar  -> prPrec i 0 (concatD [doc (showString "char")])
   TypeString  -> prPrec i 0 (concatD [doc (showString "string")])
   TypeArray n type' -> prPrec i 0 (concatD [doc (showString "[") , prt 0 t n , doc (showString "]") , prt 0 t  type'])
   TypePointer type' -> prPrec i 0 (concatD [doc (showString "*") , prt 0 t type'])


instance Print Block where
  prt i t e = case e of
   BodyBlock statements -> prPrec i 0 (concatD [doc (showString "{") , prt 0 (t+1) statements , doc (showString "}")])


instance Print Statement where
  prt i t e = case e of
   StateBlock block -> prPrec i 0 (concatD [ prt 0 t block])
   StateSmpl statementsmpl -> prPrec i 0 (concatD [ prt 0 t statementsmpl])
   StateReturn expr -> prPrec i 0 (concatD [doc (showString "return") , prt 0 t expr])
   StateIf expr block -> prPrec i 0 (concatD [doc (showString "if") , prt 0 t expr , prt 0 t block])
   StateIfElse expr block0 block -> prPrec i 0 (concatD [doc (showString "if") , prt 0 t expr , prt 0 t  block0 , doc (showString "else") , prt 0 t block])
   StateIfStm statementsmpl expr block -> prPrec i 0 (concatD [doc (showString "if") , prt 0 t statementsmpl , doc (showString ";") , prt 0 t  expr , prt 0 t block])
   StateIfElseStm statementsmpl expr block0 block -> prPrec i 0 (concatD [doc (showString "if") , prt 0 t statementsmpl , doc (showString ";") , prt 0 t expr , prt 0 t  block0 , doc (showString "else") , prt 0 t block])
   StateFor statementsmpls0 expr statementsmpls block -> prPrec i 0 (concatD [doc (showString "for") , prt 0 t  statementsmpls0 , doc (showString ";") , prt 0 t  expr , doc (showString ";") , prt 0 t  statementsmpls , prt 0 t  block])
   StateWhile expr block -> prPrec i 0 (concatD [doc (showString "for") , prt 0 t  expr , prt 0 t  block])
   StateDecl decl -> prPrec i 0 (concatD [prt 0 t  decl])
   StateBreak  -> prPrec i 0 (concatD [doc (showString "break")])
   StateContinue  -> prPrec i 0 (concatD [doc (showString "continue")])
   StateTryCatch block0 block -> prPrec i 0 (concatD [doc (showString "try") , prt 0 t  block0 , doc (showString "catch") , prt 0 t  block])
   StateWrite expr -> prPrec i 0 (concatD [doc (showString "write") , doc (showString "(") , prt 0 t  expr , doc (showString ")")])
   StateRead expr -> prPrec i 0 (concatD [doc (showString "read") , doc (showString "(") , prt 0 t  expr , doc (showString ")")])

  prtList t es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [doc ( replicateS (4*t) (showChar ' ')) , prt 1 t x,  prt 1 t xs])

instance Print StatementSmpl where
  prt i t e = case e of
   StateShortVarDecl shortvardecl -> prPrec i 0 (concatD [prt 0 t   shortvardecl])
   StateExp expr -> prPrec i 0 (concatD [prt 0 t   expr])
   StateAsgn expl expr -> prPrec i 0 (concatD [prt 0 t  expl , doc (showString "=") , prt 0 t  expr])

  prtList t es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 t  x])

instance Print ExpL where
  prt i t e = case e of
   ExpId id -> prPrec i 0 (concatD [prt 0 t  id])
   ExpArr expl expr -> prPrec i 0 (concatD [prt 0 t  expl , doc (showString "[") , prt 0 t  expr , doc (showString "]")])
   ExpDeref expr -> prPrec i 0 (concatD [doc (showString "*") , prt 0 t  expr])


instance Print ExpR where
  prt i t e = case e of
   ExpAdd expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "+") , prt 0 t  expr])
   ExpSub expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "-") , prt 0 t  expr])
   ExpMul expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "*") , prt 0 t  expr])
   ExpDiv expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "/") , prt 0 t  expr])
   ExpMod expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "%") , prt 0 t  expr])
   ExpEqu expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "==") , prt 0 t  expr])
   ExpNeq expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "!=") , prt 0 t  expr])
   ExpLes expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "<") , prt 0 t  expr])
   ExpLeq expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "<=") , prt 0 t  expr])
   ExpGre expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString ">") , prt 0 t  expr])
   ExpGrq expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString ">=") , prt 0 t  expr])
   ExpAnd expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "&&") , prt 0 t  expr])
   ExpOr expr0 expr -> prPrec i 0 (concatD [prt 0 t  expr0 , doc (showString "||") , prt 0 t  expr])
   ExpNot expr -> prPrec i 0 (concatD [doc (showString "!") , prt 0 t  expr])
   ExpNeg expr -> prPrec i 0 (concatD [doc (showString "-") , prt 0 t  expr])
   ExpValue value -> prPrec i 0 (concatD [prt 0 t  value])
   ExpLef expl -> prPrec i 0 (concatD [prt 0 t  expl])
   ExpFuncEmpty id -> prPrec i 0 (concatD [prt 0 t  id , doc (showString "(") , doc (showString ")")])
   ExpFunc id exprs -> prPrec i 0 (concatD [prt 0 t  id , doc (showString "(") , prt 0 t  exprs , doc (showString ")")])
   ExpRef expl -> prPrec i 0 (concatD [doc (showString "&") , prt 0 t  expl])
   ExpPar expr -> prPrec i 0 (concatD [doc (showString "(") , prt 0 t  expr , doc (showString ")")])

  prtList t es = case es of
   [x] -> (concatD [prt 0 t  x])
   x:xs -> (concatD [prt 0 t  x , doc (showString ",") , prt 0 t  xs])

instance Print Value where
  prt i t e = case e of
   Int n -> prPrec i 0 (concatD [prt 0 t  n])
   Float d -> prPrec i 0 (concatD [prt 0 t  d])
   Char c -> prPrec i 0 (concatD [prt 0 t  c])
   String str -> prPrec i 0 (concatD [prt 0 t  str])
   Bool boolean -> prPrec i 0 (concatD [prt 0 t  boolean])


instance Print Boolean where
  prt i t e = case e of
   BoolTrue  -> prPrec i 0 (concatD [doc (showString "true")])
   BoolFalse  -> prPrec i 0 (concatD [doc (showString "false")])




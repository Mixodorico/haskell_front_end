Entry.          Start ::= "package" Id [Decl];

DeclFun.   	    Decl ::= "func" Id "(" [Param] ")" Type Block;
DeclProc.       Decl ::= "func" Id "(" [Param] ")" Block;
DeclVar. 	      Decl ::= "var"  [Id] Type;
DeclVarInit. 	  Decl ::= "var"  [Id] "=" [RExp];
DeclVarShort.   ShortVarDecl ::= [Id] ":=" [RExp];


ParamL.   	Param ::=  [Id] Type;				-- di default Ã¨ passaggio per valore
ParamLPassType. Param ::=  Pass [Id] Type;
PassValue.	Pass  ::=  "val";
PassRef.	Pass  ::=  "ref";
PassValueRes.   Pass  ::=  "valres";


TypeVoid.    Type ::= "void";
TypeInt.     Type ::= "int";
TypeBool.    Type ::= "bool";
TypeFloat.   Type ::= "float";
TypeChar.    Type ::= "char";
TypeString.  Type ::= "string";
TypeArray.   Type ::=  "[" Integer "]" Type; 
TypePointer. Type ::= "*" Type; 


BodyBlock. Block ::= "{" [Statement] "}";

StateBlock.       	Statement ::= Block;
StateSmpl.	  	Statement ::= StatementSmpl;
StateReturn.      	Statement ::= "return" RExp;
StateIf.	  	Statement ::= "if" RExp Block;
StateIfElse.	  	Statement ::= "if" RExp Block "else" Block;
StateIfStm.	  	Statement ::= "if" StatementSmpl ";" RExp Block;
StateIfElseStm.	  	Statement ::= "if" StatementSmpl ";" RExp Block "else" Block;
StateFor.	  	Statement ::= "for" [StatementSmpl] ";" RExp ";" [StatementSmpl] Block;
StateWhile.       	Statement ::= "for" RExp Block;
StateDecl.        	Statement ::= Decl;
StateBreak.        	Statement ::= "break"; 
StateContinue.     	Statement ::= "continue";
StateTryCatch.	  	Statement ::= "try" Block "catch" Block;
StateWrite. 		Statement ::= "write" "(" RExp ")";
StateRead.  		Statement ::= "read" "(" RExp ")"; 

StateShortVarDecl. 	StatementSmpl ::= ShortVarDecl;
StateExp.	   	StatementSmpl ::= RExp;
StateAsgn.	   	StatementSmpl ::= LExp "=" RExp;

						
ExpId.    LExp ::= Id ;
ExpArr.   LExp ::= LExp "[" RExp "]" ;
ExpDeref. LExp ::= "*" RExp ;

ExpAdd. RExp ::= RExp "+" RExp ;
ExpSub. RExp ::= RExp "-" RExp ;
ExpMul. RExp ::= RExp "*" RExp ;
ExpDiv. RExp ::= RExp "/" RExp ;
ExpMod. RExp ::= RExp "%" RExp ;						
ExpEqu. RExp ::= RExp "==" RExp ;
ExpNeq. RExp ::= RExp "!=" RExp ;
ExpLes. RExp ::= RExp "<" RExp ;
ExpLeq. RExp ::= RExp "<=" RExp ;
ExpGre. RExp ::= RExp ">" RExp ;
ExpGrq. RExp ::= RExp ">=" RExp ;
ExpAnd. RExp ::= RExp "&&" RExp ;
ExpOr.  RExp ::= RExp "||" RExp ;
ExpNot. RExp ::= "!" RExp ;
ExpNeg. RExp ::= "-" RExp ;
ExpValue. RExp ::= Value ;
ExpLef.   RExp ::= LExp ;
ExpFuncEmpty.  RExp ::= Id "(" ")" ;
ExpFunc.  RExp ::= Id "(" [RExp] ")" ;
ExpRef.   RExp ::= "&" LExp ;
ExpPar.   RExp ::= "(" RExp ")";


Int .       	Value ::= Integer ;
Float .     	Value ::= Double ;
Char .      	Value  ::= Char ;
String .    	Value ::= String ;
Bool .      	Value  ::= Boolean ;
BoolTrue .  	Boolean ::= "true" ;
BoolFalse . 	Boolean ::= "false" ;


(:[]).	[Id] ::= Id;
(:).	[Id] ::= Id "," [Id];

(:[]).	[RExp] ::= RExp;
(:).	[RExp] ::= RExp "," [RExp];

 [].	[StatementSmpl] ::= ;
(:[]).	[StatementSmpl] ::= StatementSmpl;


--

token Id (letter | '_')(letter | digit | '_')*;

comment "//";
comment "/*" "*/";

separator Decl "";
separator Param ",";
separator Statement "";

entrypoints Start;

Start.              Prog ::= "package" Id [Decl];

DeclFun.   	        Decl ::= "func" Id "(" [Param] ")" Type Block;
DeclProc.           Decl ::= "func" Id "(" [Param] ")" "void" Block;
DeclVar. 	        Decl ::= "var"  [Id] Type;
DeclVarInit. 	    Decl ::= "var"  [Id] "=" [RExp];
DeclVarInitType.    Decl ::= "var"  [Id] Type "=" [RExp];   --aggiunta 

DeclVarShort.       ShortVarDecl ::= [Id] ":=" [RExp];


ParamL.   	        Param ::=  [Id] Type;				    -- di default Ã¨ passaggio per valore
ParamLPassType.     Param ::=  Pass [Id] Type;
PassValue.	        Pass  ::=  "val";
PassRef.	        Pass  ::=  "ref";
PassValueRes.       Pass  ::=  "valres";


TypeInt.            Type ::= "int";
TypeBool.           Type ::= "bool";
TypeFloat.          Type ::= "float";
TypeChar.           Type ::= "char";
TypeString.         Type ::= "string";
TypeArray.          Type ::=  "[" Integer "]" Type; 
TypePointer.        Type ::= "*" Type; 


BodyBlock.          Block ::= "{" [Stmt] "}";

StateBlock.         Stmt ::= Block;
StateSmpl.	  	    Stmt ::= StmtSmpl;
StateReturn.      	Stmt ::= "return" RExp;
StateIf.	  	    Stmt ::= "if" RExp Block;
StateIfElse.	  	Stmt ::= "if" RExp Block "else" Block;
StateIfStm.	  	    Stmt ::= "if" StmtSmpl ";" RExp Block;
StateIfElseStm.	    Stmt ::= "if" StmtSmpl ";" RExp Block "else" Block;
--StateFor.	  	    Stmt ::= "for" [StmtSmpl] ";" RExp ";" [StmtSmpl] Block;
StateWhile.       	Stmt ::= "for" RExp Block;
StateDecl.        	Stmt ::= Decl;
StateBreak.        	Stmt ::= "break"; 
StateContinue.     	Stmt ::= "continue";
StateTryCatch.	  	Stmt ::= "try" Block "catch" Block;
StateWrite. 		Stmt ::= "write" "(" RExp ")";
--StateRead.  		Stmt ::= "read" "(" RExp ")"; 
StateRead.  		Stmt ::= "read"; 

StateShortVarDecl. 	StmtSmpl ::= ShortVarDecl;
StateExp.	   	    StmtSmpl ::= RExp;
StateAsgn.	   	    StmtSmpl ::= LExp "=" RExp;

						
ExpId.              LExp ::= Id ;
ExpArr.             LExp ::= LExp "[" RExp "]" ;
ExpDeref.           LExp ::= "*" RExp ;

ExpAdd.             RExp ::= RExp "+" RExp ;
ExpSub.             RExp ::= RExp "-" RExp ;
ExpMul.             RExp ::= RExp "*" RExp ;
ExpDiv.             RExp ::= RExp "/" RExp ;
ExpMod.             RExp ::= RExp "%" RExp ;						
ExpEqu.             RExp ::= RExp "==" RExp ;
ExpNeq.             RExp ::= RExp "!=" RExp ;
LExpes.             RExp ::= RExp "<" RExp ;
LExpeq.             RExp ::= RExp "<=" RExp ;
ExpGre.             RExp ::= RExp ">" RExp ;
ExpGrq.             RExp ::= RExp ">=" RExp ;
ExpAnd.             RExp ::= RExp "&&" RExp ;
ExpOr.              RExp ::= RExp "||" RExp ;
ExpNot.             RExp ::= "!" RExp ;
ExpNeg.             RExp ::= "-" RExp ;
ExpValue.           RExp ::= Value ;
LExpef.             RExp ::= LExp ;
ExpFuncEmpty.       RExp ::= Id "(" ")" ;
ExpFunc.            RExp ::= Id "(" [RExp] ")" ;
RExpef.             RExp ::= "&" LExp ;
ExpPar.             RExp ::= "(" RExp ")";


Int .       	    Value ::= Integer ;
Float .     	    Value ::= Double ;
Char .      	    Value  ::= Char ;
String .        	Value ::= String ;
Bool .      	    Value  ::= Boolean ;
BoolTrue .  	    Boolean ::= "true" ;
BoolFalse . 	    Boolean ::= "false" ;


(:[]).	[Id] ::= Id;
(:).	[Id] ::= Id "," [Id];

(:[]).	[RExp] ::= RExp;
(:).	[RExp] ::= RExp "," [RExp];

 [].	[StmtSmpl] ::= ;
(:[]).	[StmtSmpl] ::= StmtSmpl;

--

token Id (letter | '_')(letter | digit | '_')*;

comment "//";
comment "/*" "*/";

separator Decl "";
separator Param ",";
separator Stmt "";

entrypoints Prog;

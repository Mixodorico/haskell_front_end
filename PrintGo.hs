{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintGo where

-- pretty-printer generated by the BNF converter

import AbsGo
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))
  

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')


concatS :: [ShowS] -> ShowS
concatS = foldr (.) id


concatD :: [Doc] -> Doc
concatD = foldr (.) id


replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)


-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)
  

instance Print a => Print [a] where
  prt = prtList
  

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')
  

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s


prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id



instance Print Integer where
  prt _ x = doc (shows x)



instance Print Double where
  prt _ x = doc (shows x)



instance Print Id where
  prt _ (Id i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])



instance Print Boolean where
  prt i e = case e of
    Boolean_true -> prPrec i 0 (concatD [doc (showString "true")])
    Boolean_false -> prPrec i 0 (concatD [doc (showString "false")])


instance Print RExp where
  prt i e = case e of
    ExpAnd rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "&&"), prt 0 rexp2])
    ExpOr rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "||"), prt 0 rexp2])
    ExpNot rexp -> prPrec i 0 (concatD [doc (showString "!"), prt 0 rexp])
    ExpEq rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "=="), prt 0 rexp2])
    ExpNeq rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "!="), prt 0 rexp2])
    ExpLt rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "<"), prt 0 rexp2])
    ExpLtE rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "<="), prt 0 rexp2])
    ExpGt rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString ">"), prt 0 rexp2])
    ExpGtE rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString ">="), prt 0 rexp2])
    ExpAdd rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "+"), prt 0 rexp2])
    ExpSub rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "-"), prt 0 rexp2])
    ExpMul rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "*"), prt 0 rexp2])
    ExpDiv rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "/"), prt 0 rexp2])
    ExpMod rexp1 rexp2 -> prPrec i 0 (concatD [prt 0 rexp1, doc (showString "%"), prt 0 rexp2])
    ExpNeg rexp -> prPrec i 0 (concatD [doc (showString "-"), prt 0 rexp])
    ExpRef lexp -> prPrec i 0 (concatD [doc (showString "&"), prt 0 lexp])
    ExpFuncEmpty id -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), doc (showString ")")])
    ExpFunc id rexps -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rexps, doc (showString ")")])
    ExpVal val -> prPrec i 0 (concatD [prt 0 val])
    ExpLExp lexp -> prPrec i 0 (concatD [prt 0 lexp])
    ExpPar rexp -> prPrec i 0 (concatD [doc (showString "("), prt 0 rexp, doc (showString ")")])
    StRead readt -> prPrec i 0 (concatD [prt 0 readt, doc (showString "("), doc (showString ")")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
  
  
  
instance Print Val where
  prt i e = case e of
    Int n -> prPrec i 0 (concatD [prt 0 n])
    Float d -> prPrec i 0 (concatD [prt 0 d])
    Char c -> prPrec i 0 (concatD [prt 0 c])
    String str -> prPrec i 0 (concatD [prt 0 str])
    Bool boolean -> prPrec i 0 (concatD [prt 0 boolean])
    

instance Print ReadT where
  prt i e = case e of
    ReadT_readInt -> prPrec i 0 (concatD [doc (showString "readInt")])
    ReadT_readFloat -> prPrec i 0 (concatD [doc (showString "readFloat")])
    ReadT_readChar -> prPrec i 0 (concatD [doc (showString "readChar")])
    ReadT_readString -> prPrec i 0 (concatD [doc (showString "readString")])
    
    

instance Print LExp where
  prt i e = case e of
    ExpId id -> prPrec i 0 (concatD [prt 0 id])
    ExpArr lexp rexp -> prPrec i 0 (concatD [prt 0 lexp, doc (showString "["), prt 0 rexp, doc (showString "]")])
    ExpDeref rexp -> prPrec i 0 (concatD [doc (showString "*"), prt 0 rexp])



instance Print Start where
  prt i e = case e of
    Entry id decls -> prPrec i 0 (concatD [doc (showString "package"), prt 0 id, doc (showString "\n"), prt 0 decls])



instance Print Decl where
  prt i e = case e of
    DeclVar ids type_ -> prPrec i 0 (concatD [doc (showString "var"), prt 0 ids, prt 0 type_])
    DeclVarInit ids rexps -> prPrec i 0 (concatD [doc (showString "var"), prt 0 ids, doc (showString "="), prt 0 rexps])
    DeclVarTypeInit ids type_ rexps -> prPrec i 0 (concatD [doc (showString "var"), prt 0 ids, prt 0 type_, doc (showString "="), prt 0 rexps])
    DeclFun id params type_ block -> prPrec i 0 (concatD [doc (showString "\nfunc"), prt 0 id, doc (showString "("), prt 0 params, doc (showString ")"), prt 0 type_, prt 0 block])
    DeclProc id params block -> prPrec i 0 (concatD [doc (showString "\nfunc"), prt 0 id, doc (showString "("), prt 0 params, doc (showString ")"), doc (showString "void"), prt 0 block])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x,  doc (showString "\n"), prt 0 xs])
  
  
  
instance Print ShortVarDecl where
  prt i e = case e of
    DeclVarShort ids rexps -> prPrec i 0 (concatD [prt 0 ids, doc (showString ":="), prt 0 rexps])



instance Print Type where
  prt i e = case e of
    TVoid -> prPrec i 0 (concatD [doc (showString "void")])
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TBool -> prPrec i 0 (concatD [doc (showString "bool")])
    TFloat -> prPrec i 0 (concatD [doc (showString "float")])
    TChar -> prPrec i 0 (concatD [doc (showString "char")])
    TString -> prPrec i 0 (concatD [doc (showString "string")])
    TArray n type_ -> prPrec i 0 (concatD [doc (showString "["), prt 0 n, doc (showString "]"), prt 0 type_])
    TPointer type_ -> prPrec i 0 (concatD [doc (showString "*"), prt 0 type_])



instance Print Param where
  prt i e = case e of
    Parameter ids type_ -> prPrec i 0 (concatD [prt 0 ids, prt 0 type_])
    ParameterPass pass ids type_ -> prPrec i 0 (concatD [prt 0 pass, prt 0 ids, prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
  
  
  
instance Print Pass where
  prt i e = case e of
    PassVal -> prPrec i 0 (concatD [doc (showString "val")])
    PassRef -> prPrec i 0 (concatD [doc (showString "ref")])


instance Print Block where
  prt i e = case e of
    BodyBlock stmts -> prPrec i 0 (concatD [doc (showString "{\n"), prt 0 stmts, doc (showString "}\n")])


instance Print Stmt where
  prt i e = case e of
    StDecl decl -> prPrec i 0 (concatD [prt 0 decl])
    StBlock block -> prPrec i 0 (concatD [prt 0 block])
    StSmpl stmtsmpl -> prPrec i 0 (concatD [prt 0 stmtsmpl])
    StIf rexp block -> prPrec i 0 (concatD [doc (showString "if"), prt 0 rexp, prt 0 block])
    StIfElse rexp block1 block2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 rexp, prt 0 block1, doc (showString "else"), prt 0 block2])
    StWhile rexp block -> prPrec i 0 (concatD [doc (showString "for"), prt 0 rexp, prt 0 block])
    StBreak -> prPrec i 0 (concatD [doc (showString "break")])
    StContinue -> prPrec i 0 (concatD [doc (showString "continue")])
    StReturn rexp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 rexp])
    StWrite writet rexp -> prPrec i 0 (concatD [prt 0 writet, doc (showString "("), prt 0 rexp, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x,  doc (showString "\n"), prt 0 xs])
  
  
  
instance Print WriteT where
  prt i e = case e of
    WriteT_writeInt -> prPrec i 0 (concatD [doc (showString "writeInt")])
    WriteT_writeFloat -> prPrec i 0 (concatD [doc (showString "writeFloat")])
    WriteT_writeChar -> prPrec i 0 (concatD [doc (showString "writeChar")])
    WriteT_writeString -> prPrec i 0 (concatD [doc (showString "writeString")])
    

instance Print StmtSmpl where
  prt i e = case e of
    StShortVarDecl shortvardecl -> prPrec i 0 (concatD [prt 0 shortvardecl])
    StExp rexp -> prPrec i 0 (concatD [prt 0 rexp])
    StAsgn lexp rexp -> prPrec i 0 (concatD [prt 0 lexp, doc (showString "="), prt 0 rexp])



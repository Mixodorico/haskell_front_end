module SkelGo where

-- Haskell module generated by the BNF converter

import AbsGo
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transCIdent :: CIdent -> Result
transCIdent x = case x of
  CIdent string -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  Boolean_true -> failure x
  Boolean_false -> failure x
transRExp :: RExp -> Result
transRExp x = case x of
  Or rexp1 rexp2 -> failure x
  And rexp1 rexp2 -> failure x
  Not rexp -> failure x
  Eq rexp1 rexp2 -> failure x
  Neq rexp1 rexp2 -> failure x
  Lt rexp1 rexp2 -> failure x
  LtE rexp1 rexp2 -> failure x
  Gt rexp1 rexp2 -> failure x
  GtE rexp1 rexp2 -> failure x
  Add rexp1 rexp2 -> failure x
  Sub rexp1 rexp2 -> failure x
  Mul rexp1 rexp2 -> failure x
  Div rexp1 rexp2 -> failure x
  Mod rexp1 rexp2 -> failure x
  Neg rexp -> failure x
  Ref lexp -> failure x
  FCall funcall -> failure x
  Int integer -> failure x
  Float double -> failure x
  Char char -> failure x
  String string -> failure x
  Bool boolean -> failure x
  LExprex lexp -> failure x
  Par rexp -> failure x
transLExp :: LExp -> Result
transLExp x = case x of
  Deref rexp -> failure x
  PostInc lexp -> failure x
  PostDecr lexp -> failure x
  BLExprex blexp -> failure x
transFunCall :: FunCall -> Result
transFunCall x = case x of
  ExpFuncEmpty cident -> failure x
  ExpFunc cident rexps -> failure x
transBLexp :: BLexp -> Result
transBLexp x = case x of
  ExpArr blexp rexp -> failure x
  ExpId cident -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog cident decls -> failure x
transBasicType :: BasicType -> Result
transBasicType x = case x of
  BasicType_void -> failure x
  BasicType_bool -> failure x
  BasicType_char -> failure x
  BasicType_float -> failure x
  BasicType_int -> failure x
  BasicType_string -> failure x
  BasicType1 integer basictype -> failure x
  BasicType2 basictype -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DeclVar cidents basictype -> failure x
  DeclVarInit cidents rexps -> failure x
  DeclVarInitType cidents basictype rexps -> failure x
  DeclFun cident params basictype block -> failure x
  DeclProc cident params block -> failure x
transShortVarDecl :: ShortVarDecl -> Result
transShortVarDecl x = case x of
  DeclVarShort cidents rexps -> failure x
transAssignment_op :: Assignment_op -> Result
transAssignment_op x = case x of
  Assign -> failure x
  AssgnMul -> failure x
  AssgnAdd -> failure x
  AssgnDiv -> failure x
  AssgnSub -> failure x
transParam :: Param -> Result
transParam x = case x of
  ParamL cidents basictype -> failure x
transStatementSmpl :: StatementSmpl -> Result
transStatementSmpl x = case x of
  StateShortVarDecl shortvardecl -> failure x
  StateExp rexp -> failure x
  StateAsgn lexp assignmentop rexp -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  BodyBlock statements -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  StateBlock block -> failure x
  StateSmpl statementsmpl -> failure x
  StateReturn rexp -> failure x
  StateIf rexp block -> failure x
  StateIfElse rexp block1 block2 -> failure x
  StateIfStm statementsmpl rexp block -> failure x
  StateIfElseStm statementsmpl rexp block1 block2 -> failure x
  StateFor statementsmpls1 rexp statementsmpls2 block -> failure x
  StateWhile rexp block -> failure x
  StateDecl decl -> failure x
  StateBreak -> failure x
  StateContinue -> failure x
  StateTryCatch block1 block2 -> failure x
  StateWrite rexp -> failure x
  StateRead rexp -> failure x


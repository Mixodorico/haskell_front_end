module SkelGo where

-- Haskell module generated by the BNF converter

import AbsGo
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transCIdent :: CIdent -> Result
transCIdent x = case x of
  CIdent string -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  Boolean_true -> failure x
  Boolean_false -> failure x
transRExp :: RExp -> Result
transRExp x = case x of
  Or rexp1 rexp2 -> failure x
  And rexp1 rexp2 -> failure x
  Not rexp -> failure x
  Eq rexp1 rexp2 -> failure x
  Neq rexp1 rexp2 -> failure x
  Lt rexp1 rexp2 -> failure x
  LtE rexp1 rexp2 -> failure x
  Gt rexp1 rexp2 -> failure x
  GtE rexp1 rexp2 -> failure x
  Add rexp1 rexp2 -> failure x
  Sub rexp1 rexp2 -> failure x
  Mul rexp1 rexp2 -> failure x
  Div rexp1 rexp2 -> failure x
  Mod rexp1 rexp2 -> failure x
  Neg rexp -> failure x
  Ref lexp -> failure x
  Deref rexp -> failure x
  FCall funcall -> failure x
  Int integer -> failure x
  Float double -> failure x
  Char char -> failure x
  String string -> failure x
  Bool boolean -> failure x
  LExprex lexp -> failure x
transLExp :: LExp -> Result
transLExp x = case x of
  PostInc lexp -> failure x
  PostDecr lexp -> failure x
  BLExprex blexp -> failure x
  LExpId cident -> failure x
transBLexp :: BLexp -> Result
transBLexp x = case x of
  ExpArr blexp rexp -> failure x
  ExpArrId cident rexp -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog cident compstatements -> failure x
transBasicType :: BasicType -> Result
transBasicType x = case x of
  BasicType_void -> failure x
  BasicType_bool -> failure x
  BasicType_char -> failure x
  BasicType_float -> failure x
  BasicType_int -> failure x
  BasicType_string -> failure x
  BasicType1 integer basictype -> failure x
  BasicType2 basictype -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DeclVar cidents basictype -> failure x
  DeclVarInit cidents rexps -> failure x
  DeclVarInitType cidents basictype rexps -> failure x
  DeclVarShort cidents rexps -> failure x
transDeclFun :: DeclFun -> Result
transDeclFun x = case x of
  DeclF cident params basictype block -> failure x
transParam :: Param -> Result
transParam x = case x of
  ParamL cidents basictype -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  BodyBlock compstatements -> failure x
transFunCall :: FunCall -> Result
transFunCall x = case x of
  ExpFuncEmpty cident -> failure x
  ExpFunc cident rexps -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  StateBlock block -> failure x
  StateDecl decl -> failure x
  StateDeclFun declfun -> failure x
  StateFunCall funcall -> failure x
  StateExp lexp -> failure x
  StateAsgn lexp assignmentop rexp -> failure x
  StateReturn rexp -> failure x
  StateBreak -> failure x
  StateContinue -> failure x
  StateWrite writetype rexp -> failure x
  StateRead readtype -> failure x
transAssignment_op :: Assignment_op -> Result
transAssignment_op x = case x of
  Assign -> failure x
  AssgnMul -> failure x
  AssgnAdd -> failure x
  AssgnDiv -> failure x
  AssgnSub -> failure x
transCompStatement :: CompStatement -> Result
transCompStatement x = case x of
  CompStmt statement -> failure x
  StateIf rexp block -> failure x
  StateIfElse rexp block1 block2 -> failure x
  StateIfStm statement rexp block -> failure x
  StateIfElseStm statement rexp block1 block2 -> failure x
  StateFor statement1 rexp statement2 block -> failure x
  StateWhile rexp block -> failure x
transWriteType :: WriteType -> Result
transWriteType x = case x of
  WriteType_writeInt -> failure x
  WriteType_writeFloat -> failure x
  WriteType_writeChar -> failure x
  WriteType_writeString -> failure x
transReadType :: ReadType -> Result
transReadType x = case x of
  ReadType_readInt -> failure x
  ReadType_readFloat -> failure x
  ReadType_readChar -> failure x
  ReadType_readString -> failure x


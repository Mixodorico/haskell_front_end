

module AbsGo where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Start = Entry Id [Decl]
  deriving (Eq, Ord, Show, Read)

data Decl
    = DeclFun Id [Param] Type Block
    | DeclProc Id [Param] Block
    | DeclVar [Id] Type
    | DeclVarInit [Id] [RExp]
  deriving (Eq, Ord, Show, Read)

data ShortVarDecl = DeclVarShort [Id] [RExp]
  deriving (Eq, Ord, Show, Read)

data Param = ParamL [Id] Type | ParamLPassType Pass [Id] Type
  deriving (Eq, Ord, Show, Read)

data Pass = PassValue | PassRef | PassValueRes
  deriving (Eq, Ord, Show, Read)

data Type
    = TypeVoid
    | TypeInt
    | TypeBool
    | TypeFloat
    | TypeChar
    | TypeString
    | TypeArray Integer Type
    | TypePointer Type
  deriving (Eq, Ord, Show, Read)

data Block = BodyBlock [Statement]
  deriving (Eq, Ord, Show, Read)

data Statement
    = StateBlock Block
    | StateSmpl StatementSmpl
    | StateReturn RExp
    | StateIf RExp Block
    | StateIfElse RExp Block Block
    | StateIfStm StatementSmpl RExp Block
    | StateIfElseStm StatementSmpl RExp Block Block
    | StateFor [StatementSmpl] RExp [StatementSmpl] Block
    | StateWhile RExp Block
    | StateDecl Decl
    | StateBreak
    | StateContinue
    | StateTryCatch Block Block
    | StateWrite RExp
    | StateRead RExp
  deriving (Eq, Ord, Show, Read)

data StatementSmpl
    = StateShortVarDecl ShortVarDecl
    | StateExp RExp
    | StateAsgn LExp RExp
  deriving (Eq, Ord, Show, Read)

data LExp = ExpId Id | ExpArr LExp RExp | ExpDeref RExp
  deriving (Eq, Ord, Show, Read)

data RExp
    = ExpAdd RExp RExp
    | ExpSub RExp RExp
    | ExpMul RExp RExp
    | ExpDiv RExp RExp
    | ExpMod RExp RExp
    | ExpEqu RExp RExp
    | ExpNeq RExp RExp
    | ExpLes RExp RExp
    | ExpLeq RExp RExp
    | ExpGre RExp RExp
    | ExpGrq RExp RExp
    | ExpAnd RExp RExp
    | ExpOr RExp RExp
    | ExpNot RExp
    | ExpNeg RExp
    | ExpValue Value
    | ExpLef LExp
    | ExpFuncEmpty Id
    | ExpFunc Id [RExp]
    | ExpRef LExp
    | ExpPar RExp
  deriving (Eq, Ord, Show, Read)

data Value
    = Int Integer
    | Float Double
    | Char Char
    | String String
    | Bool Boolean
  deriving (Eq, Ord, Show, Read)

data Boolean = BoolTrue | BoolFalse
  deriving (Eq, Ord, Show, Read)


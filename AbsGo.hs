

module AbsGo where

-- Haskell module generated by the BNF converter




newtype CIdent = CIdent String deriving (Eq, Ord, Show, Read)
data Boolean = Boolean_true | Boolean_false
  deriving (Eq, Ord, Show, Read)

data RExp
    = Or RExp RExp
    | And RExp RExp
    | Not RExp
    | Eq RExp RExp
    | Neq RExp RExp
    | Lt RExp RExp
    | LtE RExp RExp
    | Gt RExp RExp
    | GtE RExp RExp
    | Add RExp RExp
    | Sub RExp RExp
    | Mul RExp RExp
    | Div RExp RExp
    | Mod RExp RExp
    | Neg RExp
    | Ref LExp
    | FCall FunCall
    | Int Integer
    | Float Double
    | Char Char
    | String String
    | Bool Boolean
    | LExprex LExp
    | Par RExp
  deriving (Eq, Ord, Show, Read)

data LExp
    = Deref RExp | PostInc LExp | PostDecr LExp | BLExprex BLexp
  deriving (Eq, Ord, Show, Read)

data FunCall = ExpFuncEmpty CIdent | ExpFunc CIdent [RExp]
  deriving (Eq, Ord, Show, Read)

data BLexp = ExpArr BLexp RExp | ExpId CIdent
  deriving (Eq, Ord, Show, Read)

data Program = Prog CIdent [Decl]
  deriving (Eq, Ord, Show, Read)

data BasicType
    = BasicType_void
    | BasicType_bool
    | BasicType_char
    | BasicType_float
    | BasicType_int
    | BasicType_string
    | BasicType1 Integer BasicType
    | BasicType2 BasicType
  deriving (Eq, Ord, Show, Read)

data Decl
    = DeclVar [CIdent] BasicType
    | DeclVarInit [CIdent] [RExp]
    | DeclVarInitType [CIdent] BasicType [RExp]
    | DeclFun CIdent [Param] BasicType Block
    | DeclProc CIdent [Param] Block
  deriving (Eq, Ord, Show, Read)

data ShortVarDecl = DeclVarShort [CIdent] [RExp]
  deriving (Eq, Ord, Show, Read)

data Assignment_op
    = Assign | AssgnMul | AssgnAdd | AssgnDiv | AssgnSub
  deriving (Eq, Ord, Show, Read)

data Param = ParamL [CIdent] BasicType
  deriving (Eq, Ord, Show, Read)

data StatementSmpl
    = StateShortVarDecl ShortVarDecl
    | StateExp RExp
    | StateAsgn LExp Assignment_op RExp
  deriving (Eq, Ord, Show, Read)

data Block = BodyBlock [Statement]
  deriving (Eq, Ord, Show, Read)

data Statement
    = StateBlock Block
    | StateSmpl StatementSmpl
    | StateReturn RExp
    | StateIf RExp Block
    | StateIfElse RExp Block Block
    | StateIfStm StatementSmpl RExp Block
    | StateIfElseStm StatementSmpl RExp Block Block
    | StateFor [StatementSmpl] RExp [StatementSmpl] Block
    | StateWhile RExp Block
    | StateDecl Decl
    | StateBreak
    | StateContinue
    | StateTryCatch Block Block
    | StateWrite RExp
    | StateRead RExp
  deriving (Eq, Ord, Show, Read)




module AbsGo where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Start = Entry Id [Decl]
  deriving (Eq, Ord, Show, Read)

data Decl
    = DeclFun Id [Param] Type Block
    | DeclProc Id [Param] Block
    | DeclVar [Id] Type
    | DeclVarInit [Id] [RExp]
  deriving (Eq, Ord, Show, Read)

data ShortVarDecl = DeclVarShort [Id] [RExp]
  deriving (Eq, Ord, Show, Read)

data Param = ParamL [Id] Type | ParamLPassType Pass [Id] Type
  deriving (Eq, Ord, Show, Read)

data Pass = PassValue | PassRef | PassValueRes
  deriving (Eq, Ord, Show, Read)

data Type
    = TVoid
    | TInt
    | TBool
    | TFloat
    | TChar
    | TString
    | TArray Integer Type
    | TPointer Type
  deriving (Eq, Ord, Show, Read)

data Block = BodyBlock [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = StBlock Block
    | StSmpl StmtSmpl
    | StReturn RExp
    | StIf RExp Block
    | StIfElse RExp Block Block
    | StIfStm StmtSmpl RExp Block
    | StIfElseStm StmtSmpl RExp Block Block
    | StFor [StmtSmpl] RExp [StmtSmpl] Block
    | StWhile RExp Block
    | StDecl Decl
    | StBreak
    | StContinue
    | StTryCatch Block Block
    | StWrite RExp
    | StRead RExp
  deriving (Eq, Ord, Show, Read)

data StmtSmpl
    = StShortVarDecl ShortVarDecl | StExp RExp | StAsgn LExp RExp
  deriving (Eq, Ord, Show, Read)

data LExp = ExpId Id | ExpArr LExp RExp | ExpDeref RExp
  deriving (Eq, Ord, Show, Read)

data RExp
    = ExpAdd RExp RExp
    | ExpSub RExp RExp
    | ExpMul RExp RExp
    | ExpDiv RExp RExp
    | ExpMod RExp RExp
    | ExpEq RExp RExp
    | ExpNeq RExp RExp
    | ExpLt RExp RExp
    | ExpLtE RExp RExp
    | ExpGt RExp RExp
    | ExpGtE RExp RExp
    | ExpAnd RExp RExp
    | ExpOr RExp RExp
    | ExpNot RExp
    | ExpNeg RExp
    | ExpVal Value
    | ExpLef LExp
    | ExpFuncEmpty Id
    | ExpFunc Id [RExp]
    | ExpRef LExp
    | ExpPar RExp
  deriving (Eq, Ord, Show, Read)

data Value
    = Int Integer
    | Float Double
    | Char Char
    | String String
    | Bool Boolean
  deriving (Eq, Ord, Show, Read)

data Boolean = Boolean_true | Boolean_false
  deriving (Eq, Ord, Show, Read)


-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGo where
import AbsGo
import LexGo
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '*=' { PT _ (TS _ 9) }
  '+' { PT _ (TS _ 10) }
  '++' { PT _ (TS _ 11) }
  '+=' { PT _ (TS _ 12) }
  ',' { PT _ (TS _ 13) }
  '-' { PT _ (TS _ 14) }
  '--' { PT _ (TS _ 15) }
  '-=' { PT _ (TS _ 16) }
  '/' { PT _ (TS _ 17) }
  '/=' { PT _ (TS _ 18) }
  ':=' { PT _ (TS _ 19) }
  ';' { PT _ (TS _ 20) }
  '<' { PT _ (TS _ 21) }
  '<=' { PT _ (TS _ 22) }
  '=' { PT _ (TS _ 23) }
  '==' { PT _ (TS _ 24) }
  '>' { PT _ (TS _ 25) }
  '>=' { PT _ (TS _ 26) }
  '[' { PT _ (TS _ 27) }
  ']' { PT _ (TS _ 28) }
  'bool' { PT _ (TS _ 29) }
  'break' { PT _ (TS _ 30) }
  'char' { PT _ (TS _ 31) }
  'continue' { PT _ (TS _ 32) }
  'else' { PT _ (TS _ 33) }
  'false' { PT _ (TS _ 34) }
  'float' { PT _ (TS _ 35) }
  'for' { PT _ (TS _ 36) }
  'func' { PT _ (TS _ 37) }
  'if' { PT _ (TS _ 38) }
  'int' { PT _ (TS _ 39) }
  'package' { PT _ (TS _ 40) }
  'readChar' { PT _ (TS _ 41) }
  'readFloat' { PT _ (TS _ 42) }
  'readInt' { PT _ (TS _ 43) }
  'readString' { PT _ (TS _ 44) }
  'return' { PT _ (TS _ 45) }
  'string' { PT _ (TS _ 46) }
  'true' { PT _ (TS _ 47) }
  'var' { PT _ (TS _ 48) }
  'void' { PT _ (TS _ 49) }
  'writeChar' { PT _ (TS _ 50) }
  'writeFloat' { PT _ (TS _ 51) }
  'writeInt' { PT _ (TS _ 52) }
  'writeString' { PT _ (TS _ 53) }
  '{' { PT _ (TS _ 54) }
  '||' { PT _ (TS _ 55) }
  '}' { PT _ (TS _ 56) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }
L_CIdent { PT _ (T_CIdent $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }
CIdent    :: { CIdent} : L_CIdent { CIdent ($1)}

Boolean :: { Boolean }
Boolean : 'true' { AbsGo.Boolean_true }
        | 'false' { AbsGo.Boolean_false }
RExp :: { RExp }
RExp : RExp1 { $1 } | RExp '||' RExp1 { AbsGo.Or $1 $3 }
RExp1 :: { RExp }
RExp1 : RExp2 { $1 } | RExp1 '&&' RExp2 { AbsGo.And $1 $3 }
RExp2 :: { RExp }
RExp2 : RExp3 { $1 } | '!' RExp3 { AbsGo.Not $2 }
RExp3 :: { RExp }
RExp3 : RExp4 { $1 }
RExp4 :: { RExp }
RExp4 : RExp5 { $1 }
RExp5 :: { RExp }
RExp5 : RExp6 { $1 }
      | RExp6 '==' RExp6 { AbsGo.Eq $1 $3 }
      | RExp6 '!=' RExp6 { AbsGo.Neq $1 $3 }
      | RExp6 '<' RExp6 { AbsGo.Lt $1 $3 }
      | RExp6 '<=' RExp6 { AbsGo.LtE $1 $3 }
      | RExp6 '>' RExp6 { AbsGo.Gt $1 $3 }
      | RExp6 '>=' RExp6 { AbsGo.GtE $1 $3 }
RExp6 :: { RExp }
RExp6 : RExp7 { $1 }
RExp7 :: { RExp }
RExp7 : RExp8 { $1 }
      | RExp7 '+' RExp8 { AbsGo.Add $1 $3 }
      | RExp7 '-' RExp8 { AbsGo.Sub $1 $3 }
RExp8 :: { RExp }
RExp8 : RExp9 { $1 }
      | RExp8 '*' RExp9 { AbsGo.Mul $1 $3 }
      | RExp8 '/' RExp9 { AbsGo.Div $1 $3 }
      | RExp8 '%' RExp9 { AbsGo.Mod $1 $3 }
RExp9 :: { RExp }
RExp9 : RExp10 { $1 }
RExp10 :: { RExp }
RExp10 : RExp11 { $1 }
       | '-' RExp11 { AbsGo.Neg $2 }
       | '&' LExp { AbsGo.Ref $2 }
       | '*' RExp { AbsGo.Deref $2 }
RExp11 :: { RExp }
RExp11 : RExp12 { $1 } | FunCall { AbsGo.FCall $1 }
RExp12 :: { RExp }
RExp12 : RExp13 { $1 }
       | Integer { AbsGo.Int $1 }
       | Double { AbsGo.Float $1 }
       | Char { AbsGo.Char $1 }
       | String { AbsGo.String $1 }
       | Boolean { AbsGo.Bool $1 }
RExp13 :: { RExp }
RExp13 : RExp14 { $1 } | LExp { AbsGo.LExprex $1 }
RExp14 :: { RExp }
RExp14 : '(' RExp ')' { $2 }
LExp :: { LExp }
LExp : LExp1 { $1 }
     | LExp1 '++' { AbsGo.PostInc $1 }
     | LExp1 '--' { AbsGo.PostDecr $1 }
LExp1 :: { LExp }
LExp1 : '(' LExp ')' { $2 }
      | BLexp { AbsGo.BLExprex $1 }
      | CIdent { AbsGo.LexpId $1 }
BLexp :: { BLexp }
BLexp : BLexp '[' RExp ']' { AbsGo.ExpArr $1 $3 }
      | CIdent '[' RExp ']' { AbsGo.ExpId $1 $3 }
Program :: { Program }
Program : 'package' CIdent ListStatement { AbsGo.Prog $2 (reverse $3) }
BasicType :: { BasicType }
BasicType : 'void' { AbsGo.BasicType_void }
          | 'bool' { AbsGo.BasicType_bool }
          | 'char' { AbsGo.BasicType_char }
          | 'float' { AbsGo.BasicType_float }
          | 'int' { AbsGo.BasicType_int }
          | 'string' { AbsGo.BasicType_string }
          | '[' Integer ']' BasicType { AbsGo.BasicType1 $2 $4 }
          | '*' BasicType { AbsGo.BasicType2 $2 }
Decl :: { Decl }
Decl : 'var' ListCIdent BasicType { AbsGo.DeclVar $2 $3 }
     | 'var' ListCIdent '=' ListRExp { AbsGo.DeclVarInit $2 $4 }
     | 'var' ListCIdent BasicType '=' ListRExp { AbsGo.DeclVarInitType $2 $3 $5 }
     | ListCIdent ':=' ListRExp { AbsGo.DeclVarShort $1 $3 }
     | LExp { AbsGo.StateExp $1 }
     | LExp Assignment_op RExp { AbsGo.StateAsgn $1 $2 $3 }
DeclFun :: { DeclFun }
DeclFun : 'func' CIdent '(' ListParam ')' BasicType Block { AbsGo.DeclF $2 $4 $6 $7 }
Assignment_op :: { Assignment_op }
Assignment_op : '=' { AbsGo.Assign }
              | '*=' { AbsGo.AssgnMul }
              | '+=' { AbsGo.AssgnAdd }
              | '/=' { AbsGo.AssgnDiv }
              | '-=' { AbsGo.AssgnSub }
Param :: { Param }
Param : ListCIdent BasicType { AbsGo.ParamL $1 $2 }
Block :: { Block }
Block : '{' ListStatement '}' { AbsGo.BodyBlock (reverse $2) }
FunCall :: { FunCall }
FunCall : CIdent '(' ')' { AbsGo.ExpFuncEmpty $1 }
        | CIdent '(' ListRExp ')' { AbsGo.ExpFunc $1 $3 }
Statement :: { Statement }
Statement : Block { AbsGo.StateBlock $1 }
          | Decl { AbsGo.StateDecl $1 }
          | DeclFun { AbsGo.StateDeclFun $1 }
          | FunCall { AbsGo.StateFunCall $1 }
          | 'return' RExp { AbsGo.StateReturn $2 }
          | 'if' RExp Block { AbsGo.StateIf $2 $3 }
          | 'if' RExp Block 'else' Block { AbsGo.StateIfElse $2 $3 $5 }
          | 'if' Decl ';' RExp Block { AbsGo.StateIfStm $2 $4 $5 }
          | 'if' Decl ';' RExp Block 'else' Block { AbsGo.StateIfElseStm $2 $4 $5 $7 }
          | 'for' Decl ';' RExp ';' Decl Block { AbsGo.StateFor $2 $4 $6 $7 }
          | 'for' RExp Block { AbsGo.StateWhile $2 $3 }
          | 'break' { AbsGo.StateBreak }
          | 'continue' { AbsGo.StateContinue }
          | WriteType '(' RExp ')' { AbsGo.StateWrite $1 $3 }
          | ReadType '(' ')' { AbsGo.StateRead $1 }
WriteType :: { WriteType }
WriteType : 'writeInt' { AbsGo.WriteType_writeInt }
          | 'writeFloat' { AbsGo.WriteType_writeFloat }
          | 'writeChar' { AbsGo.WriteType_writeChar }
          | 'writeString' { AbsGo.WriteType_writeString }
ReadType :: { ReadType }
ReadType : 'readInt' { AbsGo.ReadType_readInt }
         | 'readFloat' { AbsGo.ReadType_readFloat }
         | 'readChar' { AbsGo.ReadType_readChar }
         | 'readString' { AbsGo.ReadType_readString }
ListCIdent :: { [CIdent] }
ListCIdent : CIdent { (:[]) $1 }
           | CIdent ',' ListCIdent { (:) $1 $3 }
ListRExp :: { [RExp] }
ListRExp : RExp { (:[]) $1 } | RExp ',' ListRExp { (:) $1 $3 }
ListParam :: { [Param] }
ListParam : {- empty -} { [] }
          | Param { (:[]) $1 }
          | Param ',' ListParam { (:) $1 $3 }
ListStatement :: { [Statement] }
ListStatement : {- empty -} { [] }
              | ListStatement Statement { flip (:) $1 $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}


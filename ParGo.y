-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGo where
import AbsGo
import LexGo
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '/' { PT _ (TS _ 12) }
  ':=' { PT _ (TS _ 13) }
  ';' { PT _ (TS _ 14) }
  '<' { PT _ (TS _ 15) }
  '<=' { PT _ (TS _ 16) }
  '=' { PT _ (TS _ 17) }
  '==' { PT _ (TS _ 18) }
  '>' { PT _ (TS _ 19) }
  '>=' { PT _ (TS _ 20) }
  '[' { PT _ (TS _ 21) }
  ']' { PT _ (TS _ 22) }
  'bool' { PT _ (TS _ 23) }
  'break' { PT _ (TS _ 24) }
  'catch' { PT _ (TS _ 25) }
  'char' { PT _ (TS _ 26) }
  'continue' { PT _ (TS _ 27) }
  'else' { PT _ (TS _ 28) }
  'false' { PT _ (TS _ 29) }
  'float' { PT _ (TS _ 30) }
  'for' { PT _ (TS _ 31) }
  'func' { PT _ (TS _ 32) }
  'if' { PT _ (TS _ 33) }
  'int' { PT _ (TS _ 34) }
  'package' { PT _ (TS _ 35) }
  'read' { PT _ (TS _ 36) }
  'ref' { PT _ (TS _ 37) }
  'return' { PT _ (TS _ 38) }
  'string' { PT _ (TS _ 39) }
  'true' { PT _ (TS _ 40) }
  'try' { PT _ (TS _ 41) }
  'val' { PT _ (TS _ 42) }
  'valres' { PT _ (TS _ 43) }
  'var' { PT _ (TS _ 44) }
  'write' { PT _ (TS _ 45) }
  '{' { PT _ (TS _ 46) }
  '||' { PT _ (TS _ 47) }
  '}' { PT _ (TS _ 48) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }
L_Id { PT _ (T_Id $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : 'package' Id ListDecl { AbsGo.Initprogram $2 (reverse $3) }
Decl :: { Decl }
Decl : 'func' Id '(' ListParam ')' Type Block { AbsGo.DeclFun $2 $4 $6 $7 }
     | 'func' Id '(' ListParam ')' Block { AbsGo.DeclProc $2 $4 $6 }
     | 'var' ListId Type { AbsGo.DeclVar $2 $3 }
     | 'var' ListId '=' ListRExp { AbsGo.DeclVarInit $2 $4 }
ShortVarDecl :: { ShortVarDecl }
ShortVarDecl : ListId ':=' ListRExp { AbsGo.DeclVarShort $1 $3 }
Param :: { Param }
Param : ListId Type { AbsGo.ParamL $1 $2 }
      | Pass ListId Type { AbsGo.ParamLPassType $1 $2 $3 }
Pass :: { Pass }
Pass : 'val' { AbsGo.PassValue }
     | 'ref' { AbsGo.PassRef }
     | 'valres' { AbsGo.PassValueRes }
Type :: { Type }
Type : 'int' { AbsGo.TypeInt }
     | 'bool' { AbsGo.TypeBool }
     | 'float' { AbsGo.TypeFloat }
     | 'char' { AbsGo.TypeChar }
     | 'string' { AbsGo.TypeString }
     | '[' Integer ']' Type { AbsGo.TypeArray $2 $4 }
     | '*' Type { AbsGo.TypePointer $2 }
StatementSmpl :: { StatementSmpl }
StatementSmpl : ShortVarDecl { AbsGo.StateShortVarDecl $1 }
              | RExp { AbsGo.StateExp $1 }
              | LExp '=' RExp { AbsGo.StateAsgn $1 $3 }
Block :: { Block }
Block : '{' ListStatement '}' { AbsGo.BodyBlock (reverse $2) }
Statement :: { Statement }
Statement : Block { AbsGo.StateBlock $1 }
          | StatementSmpl { AbsGo.StateSmpl $1 }
          | 'return' RExp { AbsGo.StateReturn $2 }
          | 'if' RExp Block { AbsGo.StateIf $2 $3 }
          | 'if' RExp Block 'else' Block { AbsGo.StateIfElse $2 $3 $5 }
          | 'if' StatementSmpl ';' RExp Block { AbsGo.StateIfStm $2 $4 $5 }
          | 'if' StatementSmpl ';' RExp Block 'else' Block { AbsGo.StateIfElseStm $2 $4 $5 $7 }
          | 'for' ListStatementSmpl ';' RExp ';' ListStatementSmpl Block { AbsGo.StateFor $2 $4 $6 $7 }
          | 'for' RExp Block { AbsGo.StateWhile $2 $3 }
          | Decl { AbsGo.StateDecl $1 }
          | 'break' { AbsGo.StateBreak }
          | 'continue' { AbsGo.StateContinue }
          | 'try' Block 'catch' Block { AbsGo.StateTryCatch $2 $4 }
          | 'write' '(' RExp ')' { AbsGo.StateWrite $3 }
          | 'read' '(' RExp ')' { AbsGo.StateRead $3 }
LExp :: { LExp }
LExp : Id { AbsGo.ExpId $1 }
     | LExp '[' RExp ']' { AbsGo.ExpArr $1 $3 }
     | '*' RExp { AbsGo.ExpDeref $2 }
RExp :: { RExp }
RExp : RExp '+' RExp { AbsGo.ExpAdd $1 $3 }
     | RExp '-' RExp { AbsGo.ExpSub $1 $3 }
     | RExp '*' RExp { AbsGo.ExpMul $1 $3 }
     | RExp '/' RExp { AbsGo.ExpDiv $1 $3 }
     | RExp '%' RExp { AbsGo.ExpMod $1 $3 }
     | RExp '==' RExp { AbsGo.ExpEqu $1 $3 }
     | RExp '!=' RExp { AbsGo.ExpNeq $1 $3 }
     | RExp '<' RExp { AbsGo.LExpes $1 $3 }
     | RExp '<=' RExp { AbsGo.LExpeq $1 $3 }
     | RExp '>' RExp { AbsGo.ExpGre $1 $3 }
     | RExp '>=' RExp { AbsGo.ExpGrq $1 $3 }
     | RExp '&&' RExp { AbsGo.ExpAnd $1 $3 }
     | RExp '||' RExp { AbsGo.ExpOr $1 $3 }
     | '!' RExp { AbsGo.ExpNot $2 }
     | '-' RExp { AbsGo.ExpNeg $2 }
     | Value { AbsGo.ExpValue $1 }
     | LExp { AbsGo.LExpef $1 }
     | Id '(' ')' { AbsGo.ExpFuncEmpty $1 }
     | Id '(' ListRExp ')' { AbsGo.ExpFunc $1 $3 }
     | '&' LExp { AbsGo.RExpef $2 }
     | '(' RExp ')' { AbsGo.ExpPar $2 }
Value :: { Value }
Value : Integer { AbsGo.Int $1 }
      | Double { AbsGo.Float $1 }
      | Char { AbsGo.Char $1 }
      | String { AbsGo.String $1 }
      | Boolean { AbsGo.Bool $1 }
Boolean :: { Boolean }
Boolean : 'true' { AbsGo.BoolTrue } | 'false' { AbsGo.BoolFalse }
ListId :: { [Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
ListRExp :: { [RExp] }
ListRExp : RExp { (:[]) $1 } | RExp ',' ListRExp { (:) $1 $3 }
ListStatementSmpl :: { [StatementSmpl] }
ListStatementSmpl : {- empty -} { [] } | StatementSmpl { (:[]) $1 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] } | ListDecl Decl { flip (:) $1 $2 }
ListParam :: { [Param] }
ListParam : {- empty -} { [] }
          | Param { (:[]) $1 }
          | Param ',' ListParam { (:) $1 $3 }
ListStatement :: { [Statement] }
ListStatement : {- empty -} { [] }
              | ListStatement Statement { flip (:) $1 $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

